#!/bin/bash
#cd "${BASH_SOURCE%/*}" || exit

. mrT.cfg

# We need a hack to get the config out - we can't start retroarch cleanly AND get a config file:
$retroarch -- --verbose  2>>"temp_config"|| kill $(ps aux | grep "ReportCrash" | awk '{print $2;exit;}') 

selectedFile=$(chooseFile)
extn="${selectedFile##*.}"

chooseToUncompress() {
	echo "And are we going to uncompress this file before passing to the emulator?"
	read cf 										
	cf=$(echo $cf | tr "[:upper:]" "[:lower:"])		# all lowercase
	if [[ "$cf" == "y" ]]; then						
		my7zip="$selectedFile"
		echo "You selected this 7zip: $my7zip;"
		. un7zip_goodmerge
		echo "Running this rom: $pathToRom"
	fi
	if [[ "$cf" == "n" ]]; then	 
		pathToRom="$selectedFile" # If we aren't extracting pass directly to emu, don't bother with temp dir 
	fi
	if [[ "$cf" != [yn] ]]; then	 
		echo "Please respond with a [y/n]: "
		chooseToUncompress
	fi 
} 	

if ! [[ $selectedFile ]]; then platformExit; fi
echo "Selected File: $selectedFile"
echo "extenstion: $extn"

if [[ 
	   $extn == "zip" 
	|| $extn == "7z" 
	|| $extn == "tar" 
	|| $extn == "gz" 
	|| $extn == "bz2" 
	#or if mimetype reports its an archive
	|| $(file $selectedFile | grep archive) ]]; then 
	chooseToUncompress
else pathToRom="$selectedFile"
fi

. select_libretro_core;
echo "Selected Core: $libretroCore"

retroarchCall() {
	"$retroarch" -- "$pathToRom" -L "$libretroCore"
}

retroarchCall
emulatorExitCode=$?


. cleanup

if (( $emulatorExitCode==0 )); then
	platformExit
else
	echo "Can't start the emulator, sorry" 
	echo "exit code was $emulatorExitCode"
	echo "I called this command:"
	echo "\"$retroarch\" -- \"$pathToRom\" -L \"$libretroCore\""
fi




